apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-setup
data:
  create.sql: |
    select "hello from database init script!" from dual;
  wait.sh: |
    until echo '\q' | mysql -hmysql -P"$PORT" -u"$USER" -p"$PASSWORD" $DATABASE; do
        echo "waiting for godot ..."
        sleep 2
    done
  leocloud.cnf: |
    [mysqld]
    innodb_use_native_aio = 0
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-admin
type: kubernetes.io/basic-auth
stringData:
  username: user
  password: password
  database: db
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  resources:
    requests:
      storage: 512Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: appsrvstorage
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  resources:
    requests:
      storage: 512Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appsrv
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appsrv
  template:
    metadata:
      labels:
        app: appsrv
    spec:
      containers:
        - name: appsrv
          image: registry.cloud.htl-leonding.ac.at/20170033/appsrv
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: appsrvstorage
              mountPath: /var/lib/appsrvstorage
          resources:
            limits:
              memory: 1024Mi
              cpu: 2048m
      initContainers:
        - name: wait
          image: mysql:8
          command: ["sh", "-c", "/usr/local/bin/wait.sh"]
          volumeMounts:
            - name: init-script
              mountPath: /usr/local/bin
              readOnly: true
          env:
            - name: USER
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: username
            - name: DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: database
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: password
      volumes:
        - name: appsrvstorage
          persistentVolumeClaim:
            claimName: appsrvstorage
        - name: init-script
          configMap:
            name: mysql-setup
            items:
              - key: wait.sh
                path: wait.sh
            defaultMode: 0744
      imagePullSecrets:
        - name: leocloudcredentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: express
spec:
  replicas: 1
  selector:
    matchLabels:
      app: express
  template:
    metadata:
      labels:
        app: express
    spec:
      containers:
        - name: express
          image: registry.cloud.htl-leonding.ac.at/20170033/express
          ports:
            - containerPort: 8080
          resources:
                requests:
                  memory: "64Mi"
                  cpu: "250m"
                limits:
                  memory: "128Mi"
                  cpu: "500m"
      initContainers:
        - name: wait
          image: mysql:8
          command: ["sh", "-c", "/usr/local/bin/wait.sh"]
          volumeMounts:
            - name: init-script
              mountPath: /usr/local/bin
              readOnly: true
          env:
            - name: USER
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: username
            - name: DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: database
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: password
      volumes:
        - name: init-script
          configMap:
            name: mysql-setup
            items:
              - key: wait.sh
                path: wait.sh
            defaultMode: 0744
      imagePullSecrets:
        - name: leocloudcredentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: registry.cloud.htl-leonding.ac.at/20170033/nginx:latest
          ports:
            - containerPort: 80
          resources:
                requests:
                  memory: "64Mi"
                  cpu: "250m"
                limits:
                  memory: "128Mi"
                  cpu: "500m"
      imagePullSecrets:
        - name: leocloudcredentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      component: mysql
  template:
    metadata:
      labels:
        component: mysql
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: database
        - name: init-script
          configMap:
            name: mysql-setup
            items:
              - key: create.sql
                path: create.sql
        - name: mysql-cnf
          configMap:
            name: mysql-setup
            items:
              - key: leocloud.cnf
                path: leocloud.cnf                  
      containers:
        - name: mysql
          image: mysql:8
#          command: ["tail", "-f", "/dev/null"]
          resources:
            limits:
              memory: 1Gi
              cpu: 2048m
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
            - name: mysql-cnf
              mountPath: /etc/mysql/conf.d/leocloud.cnf
              subPath: leocloud.cnf
              readOnly: true      
          env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: username
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: database
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: password
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: password
            - name: MYSQL_ROOT_HOST
              value: '%'
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP
      name: mysql
  selector:
    component: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: appsrv
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: appsrv
  selector:
    app: appsrv
---
apiVersion: v1
kind: Service
metadata:
  name: express
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: express
  selector:
    app: express
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
    - host: student.cloud.htl-leonding.ac.at
      http:
        paths:
          - path: /20170033(/|$)(.*)$
            pathType: Prefix
            backend:
              service:
                name: nginx
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quarkus-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /api/$1
spec:
  rules:
    - host: student.cloud.htl-leonding.ac.at
      http:
        paths:
          - path: /20170033/api/(.*)$
            pathType: Prefix
            backend:
              service:
                name: appsrv
                port:
                  number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: express-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /app/$1
spec:
  rules:
    - host: student.cloud.htl-leonding.ac.at
      http:
        paths:
          - path: /20170033/app/(.*)$
            pathType: Prefix
            backend:
              service:
                name: express
                port:
                  number: 8080
